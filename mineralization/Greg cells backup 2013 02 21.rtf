{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 #!/usr/bin/env python\
# -*- coding: utf-8 -*-\
#\
#  cells.py\
#  \
#  Copyright 2013 Greg Green <greg@greg-UX31A>\
#  \
#  This program is free software; you can redistribute it and/or modify\
#  it under the terms of the GNU General Public License as published by\
#  the Free Software Foundation; either version 2 of the License, or\
#  (at your option) any later version.\
#  \
#  This program is distributed in the hope that it will be useful,\
#  but WITHOUT ANY WARRANTY; without even the implied warranty of\
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\
#  GNU General Public License for more details.\
#  \
#  You should have received a copy of the GNU General Public License\
#  along with this program; if not, write to the Free Software\
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\
#  MA 02110-1301, USA.\
#  \
#  \
\
import numpy as np\
import matplotlib.pyplot as plt\
from os.path import abspath, expanduser\
\
def load_image(fname):\
	return plt.imread(abspath(fname))\
\
def get_baseline(img):\
	Ny, Nx = img.shape\
	bottom, top = np.zeros(Nx, dtype='i4'), np.zeros(Nx, dtype='i4')\
	mask = img[:,:] > 0.\
	for i in xrange(Nx):\
		nonzero = np.where(mask[:,i])[0]\
		if len(nonzero):\
			bottom[i] = np.min(nonzero)\
			top[i] = np.max(nonzero)\
	return bottom, top\
\
def curve_dist(curve):\
	dx = np.ones(len(curve)-1)\
	dy = np.diff(curve)\
	idx = (curve == 0.)\
	idx = idx[:-1] | idx[1:]\
	dy[idx] = 0.\
	dx[idx] = 0.\
	return np.hstack([[0], np.cumsum(np.sqrt(dx*dx+dy*dy))])\
\
def get_markers(curve, cell_length):\
	dist = curve_dist(curve)\
	marker_x, marker_y = [], []\
	\
	startIdx = np.where(dist > 0.)[0][0]\
	endIdx = np.where(np.diff(dist))[0][-1]\
	\
	cellNo = 0\
	for i,d in enumerate(dist[startIdx:endIdx+1]):\
		if d >= cellNo*cell_length:\
			marker_y.append(curve[startIdx + i])\
			marker_x.append(startIdx + i)\
			cellNo += 1\
	\
	markers = np.array([marker_x, marker_y])\
	return markers\
\
def get_slopes(markers):\
	diff = np.diff(markers, axis=1)\
	diff = diff[:,:-1] + diff[:,1:]\
	slope = np.empty(diff.shape, dtype='f8')\
	slope[0,:] = diff[1,:]\
	slope[1,:] = -diff[0,:]\
	return slope\
\
def main():\
	img = load_image('13um1314wkllm1.png')\
	\
	bottom, top = get_baseline(img)\
	x = np.arange(img.shape[1])\
	\
	markers = get_markers(top, 20.)\
	print 'Horizontal cells: %d' % markers.shape[1]\
	\
	slopes = get_slopes(markers)\
	markers_2 = markers[:,1:-1] + 10. * slopes\
	\
	fig = plt.figure()\
	ax = fig.add_subplot(1,1,1)\
	ax.imshow(img, alpha=0.3)\
	ax.plot(x, bottom, 'b-')\
	ax.plot(x, top, 'r-')\
	\
	ax.scatter(markers[0,:], markers[1,:], c='g', s=8)\
	\
	for i in xrange(markers.shape[1]-2):\
		x = [markers[0,i+1], markers_2[0,i]]\
		y = [markers[1,i+1], markers_2[1,i]]\
		ax.plot(x, y, 'g-')\
	\
	plt.show()\
	\
	return 0\
\
if __name__ == '__main__':\
	main()\
\
}